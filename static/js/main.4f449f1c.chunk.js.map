{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weathericon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_Weathericon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeid","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4f449f1c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather=(props)=>{\r\nreturn(  \r\n<div className=\"container text-light\">\r\n<div className=\"cards pt-4\">\r\n<h1> {props.city} </h1>\r\n<h5 className=\"py-4\">\r\n<i className={`wi ${props.weathericon} display-1`}/>\r\n</h5>\r\n\r\n{props.temp_celsius?(<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>):null}\r\n\r\n{/**show max and min temp */}\r\n\r\n{minmaxTemp(props.temp_min,props.temp_max)}\r\n<h4 className=\"py-3\">{props.description}</h4>\r\n</div>\r\n</div>\r\n);\r\n};\r\n\r\nfunction minmaxTemp(min,max){\r\n    if(min&& max){\r\n    return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    );\r\n}\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form=props=>{\r\nreturn(\r\n\r\n\r\n    <div className=\"container\">\r\n    <div>{props.error?error():null}</div>\r\n    <form onSubmit={props.loadweather}>\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-3 offset-md-2\">\r\n        <input\r\n         type=\"text\"\r\n          className=\"form-control\"\r\n           name=\"city\" \r\n           autoComplete=\"off\"\r\n           placeholder=\"City\"\r\n           />\r\n        </div>\r\n\r\n        <div className=\"col-md-3\">\r\n        <input \r\n        type=\"text\" \r\n        className=\"form-control\"\r\n         name=\"country\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"Country\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mt-md-0 text-md-left \">\r\n           <button className=\"btn btn-warning\">Get Weather</button>\r\n        </div>   \r\n     </div>\r\n </form>\r\n  </div>\r\n    \r\n);\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className =\"alert alert-danger mx-5\" role=\"alert\">\r\n        Please Enter City and Country \r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from \"react\";\nimport \"./App.css\";\n\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./app_component/weather.component\";\nimport Form from \"./app_component/form.component\";\n\n//api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_key=\"9bf59c67c0d408cc5e1c4877f3e4d9d5\";\n\nclass App extends React.Component{\nconstructor(){\n  super();\n  this.state={\n    city:undefined,\n    country:undefined,\n    icon:undefined,\n    main:undefined,\n    celsius:undefined,\n    temp_max:undefined,\n    description:\"\",\n    error:false\n  };  \n  //this.getWeather();\n\n  this.weathericon={\n    Thunderstorm:\"wi-thunderstorm\",\n    Drizzle:\"wi-sleet\",\n    Rain:\"wi-storm-showers\",\n    Snow:\"wi-snow\",\n    Atmosphere:\"wi-fog\",\n    Clear:\"wi-day-sunny\",\n    Clouds:\"wi-day-fog\"\n  };\n}\n\ncalCelsius(temp){\n  let cell=Math.floor(temp-273.15)\n  return cell;\n}\n\nget_Weathericon(icons,rangeid)\n{\n  switch(true){\n    case rangeid>=200 && rangeid<=232:\n      this.setState({icon:this.weathericon.Thunderstorm});\n      break;\n    case rangeid>=300 && rangeid<=321:\n      this.setState({icon:this.weathericon.Drizzle});\n        break;\n    case rangeid>=500 && rangeid<=531:\n     this.setState({icon:this.weathericon.Rain});\n          break;\n    case rangeid>=600 && rangeid<=622:\n      this.setState({icon:this.weathericon.Snow});\n            break;\n      case rangeid>=701 && rangeid<=781:\n              this.setState({icon:this.weathericon.Atmosphere});\n              break;\n       case rangeid===800:\n        this.setState({icon:this.weathericon.Clear});\n          break;\n      case rangeid>=801 && rangeid<=804:\n         this.setState({icon:this.weathericon.Clouds});\n         break;\n         default:\n          this.setState({icon:this.weathericon.Clouds});\n  }\n}\n\n\n\n\ngetWeather=async(e)=>{\n\n  e.preventDefault();\n\n  const city=e.target.elements.city.value;\n  const country=e.target.elements.country.value;\n\n  if(city&&country){\n  const api_call=await fetch(\n    `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n\n  );\nconst response=await api_call.json();\nconsole.log(response);\n\nthis.setState({\n  city:`${response.name},${response.sys.country}`,\n  country:response.sys.country,\n  celsius:this.calCelsius(response.main.temp),\n  temp_max:this.calCelsius(response.main.temp_max),\n  temp_min:this.calCelsius(response.main.temp_min),\n  description:response.weather[0].description,\n  error:false\n});\nthis.get_Weathericon(this.weathericon,response.weather[0].id);\n  }else{\n    this.setState({error : true});\n  }\n};\n\nrender(){\n  return (\n    <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error}/>\n      <Weather\n      city={this.state.city} \n      country={this.state.country}\n      temp_celsius={this.state.celsius}\n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n      weathericon={this.state.icon}\n      />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}